{"version":3,"file":"static/js/827.5f7e6d43.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","webpack://react-homework-template/./src/components/Input/Input.module.css?1f33","components/Input/Input.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form__btn\":\"ContactForm_form__btn__WXQ4e\"};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Input_label__NXpCD\",\"input\":\"Input_input__E5rzA\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from '../Input/Input.module.css';\n\nexport const Input = ({\n  type,\n  name,\n  label,\n  value,\n  pattern,\n  title,\n  onChange,\n}) => {\n  return (\n    <label className={css.label}>\n      {label}\n      <input\n        className={css.input}\n        type={type}\n        name={name}\n        value={value}\n        pattern={pattern}\n        title={title}\n        required\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React from 'react';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Input } from 'components/Input/Input';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { addContact } from '../../redux/contacts/operations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const formSubmitHandler = data => {\n    const inContacts = contacts.find(contact => contact.name === data.name);\n    if (inContacts) {\n      alert(`${data.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(data));\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n\n    const newContact = { name, number, id: nanoid(10) };\n\n    formSubmitHandler(newContact);\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <Input\n        type=\"text\"\n        label=\"name\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n      <Input\n        type=\"tel\"\n        label=\"number\"\n        name=\"number\"\n        value={number}\n        onChange={handleInputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      />\n      <button type=\"submit\" className={css.form__btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { Input } from 'components/Input/Input';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterChange } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const handleInputChange = event => {\n    dispatch(filterChange(event.target.value));\n  };\n  return (\n    <div>\n      <Input\n        type=\"text\"\n        label=\"find contacts by name\"\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleInputChange}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"item__text\":\"ContactList_item__text__DZlrG\"};","import React from 'react';\nimport css from '../ContactList/ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const deleteContactByClick = event => {\n    dispatch(deleteContact(event.target.id));\n  };\n\n  const filterContactListByQuery = () => {\n    if (filter && contacts) {\n      return contacts.filter(contact =>\n        contact.name.toUpperCase().includes(filter.toUpperCase())\n      );\n    }\n    return contacts;\n  };\n\n  const filteredList = filterContactListByQuery();\n\n  return (\n    <ul className=\"contactList\">\n      {filteredList.length > 0 &&\n        filteredList.map(({ _id, name, number }) => (\n          <li key={_id} className={css.item}>\n            <p className={css.item__text}>\n              {name}: {number}\n            </p>\n            <button id={_id} onClick={deleteContactByClick}>\n              delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n","// import { Section } from 'components/Section/Section';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n// import { ThreeCircles } from 'react-loader-spinner';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {/* <Section title=\"Phonebook\"> */}\n      <ContactForm />\n      {/* </Section> */}\n      {/* <Section title=\"Contacts\"> */}\n      <Filter />\n      {/* <ThreeCircles\n        display=\"block\"\n        height=\"30\"\n        width=\"30\"\n        color=\"#367af6\"\n        wrapperStyle={{}}\n        wrapperClass=\"spinnerWrapper\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n      /> */}\n      <ContactList />\n      {/* </Section> */}\n    </div>\n  );\n}\n"],"names":["Input","type","name","label","value","pattern","title","onChange","className","css","required","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","useState","setName","number","setNumber","handleInputChange","event","target","onSubmit","preventDefault","data","newContact","find","contact","alert","addContact","Filter","filter","filterChange","ContactList","deleteContactByClick","deleteContact","filteredList","includes","length","map","_id","onClick","Contacts","useEffect","fetchContacts"],"sourceRoot":""}